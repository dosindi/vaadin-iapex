/*
 * Copyright 2015 The original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exemption;

import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;
import org.springframework.security.web.authentication.RememberMeServices;
import org.springframework.security.web.authentication.logout.LogoutHandler;
import org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices;
import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;
import org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy;
import org.vaadin.spring.http.HttpService;
import org.vaadin.spring.security.annotation.EnableVaadinSharedSecurity;
import org.vaadin.spring.security.config.VaadinSharedSecurityConfiguration;
import org.vaadin.spring.security.shared.VaadinAuthenticationSuccessHandler;
import org.vaadin.spring.security.shared.VaadinSessionClosingLogoutHandler;
import org.vaadin.spring.security.web.VaadinRedirectStrategy;
import org.vaadin.spring.security.shared.VaadinUrlAuthenticationSuccessHandler;

import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

/**
 * Main entry point into the application.
 *
 * @author Duncan O.
 */
@EnableScheduling
@EnableAsync
@SpringBootApplication(exclude = org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.class)
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Autowired
    Execute execute;
    //Scheduler STUFF

    @Bean
    public ThreadPoolTaskScheduler taskScheduler() {
        return new ThreadPoolTaskScheduler();
    }

    @Bean
    public ThreadPoolTaskExecutor taskExecutor() {

        ThreadPoolTaskExecutor te = new ThreadPoolTaskExecutor();
        te.setCorePoolSize(5);
        te.setMaxPoolSize(10);
        te.setQueueCapacity(100);
        return te;
    }

    @PostConstruct
    public void init() {

        execute.callProcess();

    }

    /**
     * Configure Spring Security.
     */
    @Configuration
    @EnableWebSecurity
    @EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true, proxyTargetClass = true)
    @EnableVaadinSharedSecurity
    static class SecurityConfiguration extends WebSecurityConfigurerAdapter {

        @Autowired
        DataSource dataSource;

        @Autowired
        UserDetailsService userDetailsService;

        Common common = new Common();

        @Override
        public void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth.userDetailsService(userDetailsService).passwordEncoder(passwordencoder());
        }

        @Bean(name = "passwordEncoder")
        public PasswordEncoder passwordencoder() {
            return new BCryptPasswordEncoder();
        }

        @Bean(name = "userDetailsService")
        public UserDetailsService userDetailService() {

            String usersByUsernameQueryString = "select username,password, enabled from tb_users where username=?";
            String queryString = "select b.username, a.role from tb_user_roles a, tb_users b where b.username=? and a.userid=b.userid";

            JdbcDaoImpl jdbcDaoImpl = new JdbcDaoImpl();
            jdbcDaoImpl.setDataSource(dataSource());
            jdbcDaoImpl.setUsersByUsernameQuery(usersByUsernameQueryString);
            jdbcDaoImpl.setAuthoritiesByUsernameQuery(queryString);
            return jdbcDaoImpl;
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.csrf().disable(); // Use Vaadin's built-in CSRF protection instead
            http.authorizeRequests()                    
                    .antMatchers("/login/**").anonymous()
                    .antMatchers("/activate/**").permitAll()
                    .antMatchers("/vaadinServlet/UIDL/**").permitAll()                    
                    .antMatchers("/vaadinServlet/HEARTBEAT/**").permitAll().anyRequest().authenticated();
            
            http.httpBasic().disable();
            http.formLogin().disable();
            // Remember to add the VaadinSessionClosingLogoutHandler
            http.logout().addLogoutHandler((LogoutHandler) new VaadinSessionClosingLogoutHandler()).logoutUrl("/logout")
                    .logoutSuccessUrl("/login?logout").permitAll();
            http.exceptionHandling().authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint("/login"));
            // Instruct Spring Security to use the same RememberMeServices as Vaadin4Spring. Also remember the key.
            http.rememberMe().rememberMeServices(rememberMeServices()).key("myAppKey");
            // Instruct Spring Security to use the same authentication strategy as Vaadin4Spring
            http.sessionManagement().sessionAuthenticationStrategy(sessionAuthenticationStrategy());
        
        }

        @Override
        public void configure(WebSecurity web) throws Exception {
            web.ignoring().antMatchers("/VAADIN/**", "/WEB-INF/**","/activate/**");
        }

        /**
         * The {@link AuthenticationManager} must be available as a Spring bean
         * for Vaadin4Spring.
         */
        @Override
        @Bean
        public AuthenticationManager authenticationManagerBean() throws Exception {
            return super.authenticationManagerBean();
        }

        /**
         * The {@link RememberMeServices} must be available as a Spring bean for
         * Vaadin4Spring.
         */
        @Bean
        public RememberMeServices rememberMeServices() {
            return new TokenBasedRememberMeServices("myAppKey", userDetailsService());
        }

        /**
         * The {@link SessionAuthenticationStrategy} must be available as a
         * Spring bean for Vaadin4Spring.
         */
        @Bean
        public SessionAuthenticationStrategy sessionAuthenticationStrategy() {
            return new SessionFixationProtectionStrategy();
        }

        @Bean(name = VaadinSharedSecurityConfiguration.VAADIN_AUTHENTICATION_SUCCESS_HANDLER_BEAN)
        VaadinAuthenticationSuccessHandler vaadinAuthenticationSuccessHandler(HttpService httpService,
                VaadinRedirectStrategy vaadinRedirectStrategy) {
            return new VaadinUrlAuthenticationSuccessHandler(httpService, vaadinRedirectStrategy, "/");
        }

        @Bean(name = "dataSource")
        @Primary
        @ConfigurationProperties(prefix = "spring.datasource")
        public DataSource dataSource() {
            return new org.apache.tomcat.jdbc.pool.DataSource();
//            DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource();
//
//            driverManagerDataSource.setDriverClassName("com.mysql.jdbc.Driver");
//
//            driverManagerDataSource.setUrl("jdbc:mysql://" + common.IP + ":" + common.PORT + "/"+common.DB);
//
//            driverManagerDataSource.setUsername(common.USER);
//
//            driverManagerDataSource.setPassword(common.PASS);
//
//            return driverManagerDataSource;

        }
    }

}
